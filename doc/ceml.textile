h1. Introducing CEML

CEML is the world's first programming language custom-built for bringing people together.

All assignments and reassignments given through the viewer are actually CEML programs which are then executed on the server, resulting in a test message-, IM-, or mobile application-based coordination.

h2. A sample program

  offering "some quiet time" (many agents; 10m) {
    provides: quiet observation connection peace
    assignment {
      [sit w hands on left leg] to signal others
      once recognized,
      all agents will [be silent, hearing what's around] for DUR
      afterwards, [scowl or frown]
      leave [one at a time]
    }
  }

or the slightly more complex rendezvous:

  discern other_guys_clothing {
    ask other: What are you wearing (so the other person can recognize you)?
  }

  offering "a high five" (2 agents; 2m) {
    provides: connection inclusion
    assignment {
      find someone wearing |other_guys_clothing|
      give them a high five
      then keep walking around the corner          (:end/exit:)
    }
  }

There are many more examples at /app/ideas.ceml, and the parser is at /lib/gc_api/ceml.js.

h2. Other resources

* There is a TextMate bundle which does syntax highlighting for CEML.  Someone will make a vim mode soon.

h2. Reference - Commands

CEML has a small number of keywords at this point:  'offering', 'assign', 'discern', and 'context' are the main four, and there is also 'ask', 'provides', and 'snippet'.  'assignment' can be used instead of "assign all".

h3. ask [role] [question]

Used in a discern clause to indicate that the information we are discerning can be obtained by asking someone with the named role the question provided.

h3. assign [role] [assignment]

Says to give the assignment to the people who match the role.  Note that the assignment may have discernables embedded within it, in which case the server will attempt to get values by asking questions, etc, before sending these assignments.

h3. context [block]

Allows the programmer to set defaults which will be true across all offerings defined within the context.

h3. discern [discernable] [block]

Describes how a given piece of information can be determined.  See 'ask'.  In the future, there will be other mechanisms such as voting and various interactive methods.

h3. offering [name] (rolespec) [block]

Encapsulates a game which can be run in the system.

h3. provides [tags]

Used within an offering to specify whom it should be offered to.  'tags' is a set of upfors.

h3. snippet [satisfiers] [snippet]

CEML requires all assignments to satisfy a set of satisfiers.. initially, these are called "goto", "meet", "cue", "act", "end", and "exit", and every assignment which is sent out needs to have instructions which seem to provide instructions for these.  The snippet command defines an alternate set of snippets which can be used to satisfy these requirements.


h2. Reference - Syntax

The syntax is simple and a bit like a cross between tcl and ruby.  Every line starts with a command keyword, contains some arguments, possibly a special qualifier in parens, and possibly a block. 

Since so many commands take a string as their last arg, there is a special syntax.  A unquoted colon anywhere in the string means to take what follows as a string argument.
